1.What happens when you initialize a repository? Why do you need to do it?
Create a new repository in server and local. Inital a space to store new file.



2.How is the staging area different from the working directory and the repository?
What value do you think it offers?
It is a buffer area. Like a collection point. working space is like a home, and repository like a working space. Before we go to work together, we can
have a collection place.

Before we put all things to commit together, we can select sth from them, and commit some of them.

3.How can you use the staging area to make sure you have one commit per logical 
change?
If we make any changes, we can add to satging area. And if we think we should commit for a whole logic. We can compare staging area file with head commit history and choose choose those files we want to commit to make sure we commit per logical change.



3.What are some situations when branches would be helpful in keeping your history organized? 
When you make some new features in a project. You can use them in branch.
When you fix some bugs, you can make branch and fix them and then commit to master.
When you work with others, and make product realse. you can work on your branch, and merge to master.

How would branches help?
Make someone's code not influence with others.

4.How do the diagrams help you visualize the branch structure?
Diagrams makes the commit logical clear and make the relationship of every commits clear.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?



What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?
